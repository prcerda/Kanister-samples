apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: postgresql-ext-bp
actions:
  backup:
    outputArtifacts:
      pgBackup:
        # Capture the kopia snapshot information for subsequent actions
        # The information includes the kopia snapshot ID which is essential for restore and delete to succeed
        # `kopiaOutput` is the name provided to kando using `--output-name` flag
        kopiaSnapshot: "{{ .Phases.pgDump.Output.kopiaOutput }}"
    phases:
    - func: KubeTask
      name: pgDump
      objects:
        pgSecret:
          kind: Secret
          name: 'postgresql-secret'
          namespace: "{{ .Deployment.Namespace }}"
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.95.0
        namespace: '{{ .Deployment.Namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='{{ index .Phases.pgDump.Secrets.pgSecret.Data "host" | toString }}'
          export PGUSER='{{ index .Phases.pgDump.Secrets.pgSecret.Data "username" | toString }}'
          export PGPASSWORD='{{ index .Phases.pgDump.Secrets.pgSecret.Data "password" | toString }}'
          export PGPORT='{{ index .Phases.pgDump.Secrets.pgSecret.Data "port" | toString }}'
          db_name='{{ index .Phases.pgDump.Secrets.pgSecret.Data "db_name" | toString }}'
          backup_file_path="backup.sql"
          pg_dump -U $PGUSER -c -d ${db_name} | kando location push --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --output-name "kopiaOutput" -
  restore:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `pgBackup.KopiaSnapshot`
    - pgBackup
    phases:
    - func: KubeTask
      name: pgRestore
      objects:
        pgSecret:
          kind: Secret
          name: 'postgresql-secret'
          namespace: "{{ .Deployment.Namespace }}"
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.95.0
        namespace: '{{ .Deployment.Namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='{{ index .Phases.pgRestore.Secrets.pgSecret.Data "host" | toString }}'
          export PGUSER='{{ index .Phases.pgRestore.Secrets.pgSecret.Data "username" | toString }}'
          export PGPASSWORD='{{ index .Phases.pgRestore.Secrets.pgSecret.Data "password" | toString }}'
          export PGPORT='{{ index .Phases.pgRestore.Secrets.pgSecret.Data "port" | toString }}'
          db_name='{{ index .Phases.pgRestore.Secrets.pgSecret.Data "db_name" | toString }}'
          backup_file_path="backup.sql"
          kopia_snap='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'
          kando location pull --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}" - | psql -q -U "${PGUSER}" ${db_name}
  delete:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `pgBackup.KopiaSnapshot`
      - pgBackup
    phases:
    - func: KubeTask
      name: deleteDump
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.95.0
        namespace: "{{ .Namespace.Name }}"
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            backup_file_path="backup.sql"
            kopia_snap='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'
            kando location delete --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}"
